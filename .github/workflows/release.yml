name: Release Every Monday
on:
  workflow_dispatch:
  schedule:
    # At 10AM EST Monday
    - cron: '0 15 * * 1'

# Sets the GITHUB_TOKEN permissions to allow release
permissions:
  contents: write

# This action requires a GitHub app with content write access installed 
# to bypass the main branch  protection rule and dispatch the event to a different repo

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
          owner: ${{ github.repository_owner }}
          repositories: |
            veda-ui
            veda-config
            next-veda-ui
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
      - name: git config
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - name: Use Node.js ${{ env.NODE }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE }}
          registry-url: https://registry.npmjs.org/
      - run: yarn
      # - name: Release through Git
      #   id: git-release
      #   run: yarn release  --ci --verbose
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish package to NPM
        run: |
          yarn buildlib
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      # - name: Repository Dispatch
      #   uses: peter-evans/repository-dispatch@v3
      #   with:
      #     token: ${{steps.generate-token.outputs.token}}
      #     repository: nasa-impact/veda-config
      #     event-type: update-version
      #     client-payload: '{"ref": "${{ github.ref }}", "VERSION_NUMBER": "${{ steps.git-release.outputs.VERSION_NUMBER }}"}'
      - name: Trigger version update in Template Instance
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{steps.generate-token.outputs.token}}
          repository: nasa-impact/next-veda-ui
          event-type: update-version
          client-payload: '{"ref": "${{ github.ref }}", "VERSION_NUMBER": "${{ steps.git-release.outputs.VERSION_NUMBER }}"}'
  # notify:
  #   # If any of job fails
  #   if: failure() 
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   steps:
  #     - name: Notify failure through Slack
  #       uses: slackapi/slack-github-action@v2.0.0
  #       with:
  #         webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
  #         webhook-type: incoming-webhook
  #         payload: |
  #           text: "*VEDA UI Release failed*: "
  #           blocks:
  #             - type: "section"
  #               text:
  #                 type: "mrkdwn"
  #                 text: "*VEDA UI Release failed*: Check action page to see the details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  # trigger:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - release
  #   steps:
  #     - name: Trigger veda-ui version update in next-veda-ui
  #       run: |
  #         # Set the required variables
  #         repo_owner=${{ github.repository_owner }}
  #         repo_name=${{ github.repository }}
  #         event_type="trigger-workflow" 
  #         service="next-veda-ui"
  #         version="${{ steps.git-release.outputs.VERSION_NUMBER }}"
  
  #         curl -L \
  #           -X POST \
  #           -H "Accept: application/vnd.github+json" \
  #           -H "Authorization: Bearer ${{ secrets.PAT }}" \
  #           -H "X-GitHub-Api-Version: 2022-11-28" \
  #           https://api.github.com/repos/$repo_owner/$repo_name/dispatches \
  #           -d "{\"event_type\": \"$event_type\", \"client_payload\": {\"service\": \"$service\", \"version\": \"$version\", \"unit\": false, \"integration\": true}}"

# https://medium.com/hostspaceng/triggering-workflows-in-another-repository-with-github-actions-4f581f8e0ceb#:~:text=In%20the%20source%20repository%2C%20go,e.g.%2C%20owner%2Frepo%20).